{
    "Header": {
        "prefix":"header",
        "body":[
            "/*\t$TM_FILENAME",
            "",
            "\t${2:author}",
            "\t${3:company}",
            "\t$CURRENT_MONTH_NAME $CURRENT_DATE, $CURRENT_YEAR",
            "",
            "\t${5:description}",
            "*/"
        ],
        "description": "File header template"
    },
    "Region": {
        "prefix":"region",
        "body":[
            ";region ${1:region name}",
            "$2",
            ";endregion"
        ],
        "description": "Region folding"
    },
    "Defun": {
        "prefix":"defun",
        "body":[
            "(defun ${1:FuncName} (${2:arg1 arg2 ...})",
            "\t(let ()",
            "\t\t$3",
            "\t)",
            ")"
        ],
        "description": "Defines a function with the name and formal argument list you specify"
    },
    "Procedure": {
        "prefix":"procedure",
        "body":[
            "(procedure ${1:FuncName}(${2:arg1 arg2 ...})",
            "\t(let ()",
            "\t\t$3",
            "\t)",
            ")"
        ],
        "description": "Defines a function using a formal argument list"
    },
    "Let": {
        "prefix":"let",
        "body":[
            "(let (${1:var1 var2 ...})",
            "\t$2",
            ")"
        ],
        "description": "Use to declare a collection of local variables"
    },
    "When": {
        "prefix":"when",
        "body":[
            "(when ${1:condition}",
            "\t$2",
            ")"
        ],
        "description": "If the result is non-nil, evaluates the sequence of expressions and returns the value of the last expression"
    },
    "Unless": {
        "prefix":"unless",
        "body":[
            "(unless ${1:condition}",
            "\t$2",
            ")"
        ],
        "description": "If the result is true (non-nil), it returns nil; otherwise evaluates the body expressions in sequence and returns the value of the last expression"
    },
    "Case": {
        "prefix":"case",
        "body":[
            "(case ${1:key}",
            "\t(${2:value}",
            "\t\t$3",
            "\t)",
            "\t(t",
            "\t\tt",
            "\t)",
            ")"
        ],
        "description": "Branches to the value equal to key"
    },
    "If": {
        "prefix":"if",
        "body":[
            "(if ${1:condition} then",
            "\t$2",
            ")"
        ],
        "description": "Executes then expression if the condition is true (that is, its value is non-nil)"
    },
    "If Else": {
        "prefix": ["ifelse", "else"],
        "body":[
            "(if ${1:condition} then",
            "\t$2",
            "else",
            "\t$3",
            ")"
        ],
        "description": "If the condition is true, the sequence of expressions between then and else is evaluated. If the condition is nil instead, the sequence of expressions following the else keyword is evaluated"
    },
    "Foreach": {
        "prefix":"foreach",
        "body":[
            "(foreach ${1:item} ${2:list}",
            "\t$3",
            ")"
        ],
        "description": "Evaluates one or more expressions for each element of a list of values"
    },
    "For": {
        "prefix":"for",
        "body":[
            "(for i ${1:start} ${2:end}",
            "\t$3",
            ")"
        ],
        "description": "Loop i variable from the start to end integer"
    },
    "Setof": {
        "prefix":"setof, linq",
        "body":[
            "setof(x ${1:list} ${2:condition})"
        ],
        "description": "Returns a new list containing only those elements in a list or the keys in an association table that satisfy an expression"
    },
    "Mapcar Lambda": {
        "prefix": ["mapcarlambda", "lambda", "linq"],
        "body":[
            "mapcar(lambda((x) ${1:condition}) ${2:list})"
        ],
        "description": "Use to transform all items in the list"
    },
    "Index": {
        "prefix":"index",
        "body":[
            "index(${1:string1} ${2:string2})"
        ],
        "description": "Returns a string consisting of the remainder of string1 beginning with the first occurrence of string2."
    },
    "Author": {
        "prefix":"author",
        "body":[
            "Herbert Agosto"
        ],
        "description": "Author"
    }
    
}
